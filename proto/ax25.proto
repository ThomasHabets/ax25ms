/*
   Copyright 2021 Google LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    https://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
syntax = "proto3";

package ax25;

option go_package = "github.com/ThomasHabets/ax25ms/pkg/proto/ax25";

import "aprs.proto";

message Repeater {
  string address = 1;
  bool has_been_repeated = 2;
}

message Packet {
  string dst = 1;
  string src = 2;
  repeated Repeater repeater = 3;
  int32 fcs = 4;

  message SABME {
    bool poll = 1;
  }
  message SABM {
    bool poll = 1;
  }
  message DISC {
    bool poll = 1;
  }
  message DM {
    bool poll = 1;
  }
  message UA {
    bool poll = 1;
  }
  message FRMR {
    bool poll = 1;
  }
  message XID {
    bool poll = 1;
  }
  message TEST {
    bool push = 1;
    bytes info = 2;
  }
  message UI {
    int32 pid = 1;
    int32 push = 2;
    bytes payload = 3;
  }
  message IFrame {
    // 3 N(R)
    int32 nr = 1; // 3 or 7 bits.
    int32 ns = 2; // 3 or 7 bits.

    bool poll = 3;

    // Linux signals extended modulus using a reserved bit.
    bool extended = 4;

    int32 pid = 5; // 3.4. Protocol number. E.g. F0 for "No L3 data"

    bytes payload = 6;
  }

  message SFrame {
    int32 nr = 1;
    bool poll = 3;
  }
  // Reserved proto range: 5-10.

  oneof frame_type {
    // U Frames. Order is the same as in section 4.3.3.
    SABME sabme = 11;
    SABM sabm = 12;
    DISC disc = 13;
    DM dm = 14;
    UA ua = 15;
    FRMR frmr = 16;
    UI ui = 17;
    XID xid = 18;
    TEST test = 19;

    // I frames.
    IFrame iframe = 20;

    // S frames. Order same as in 4.3.2.
    SFrame rr = 21;
    SFrame rnr = 22;
    SFrame rej = 23;
    SFrame srej = 24;
  }

  // Extra fields.
  bool rr_extseq = 31; // rr1 bit in src.
  // TODO: rename command & response.
  bool command_response = 32; // Top bit in dst. 3.12.2.
  bool command_response_la = 33; // Top bit in src. 3.12.3.
  bool rr_dst1 = 34; // rr1 bit in dst.

  // Extra information decoded about higher level protocols.
  // This data is in addition to whatever frame carried it.
  //
  // E.g. `aprs` will be filled out if it's an IFrame, and
  // it decodes correctly as APRS.
  aprs.Packet aprs = 41;
}

message ParseRequest {
  bytes payload = 1;
}

message ParseResponse {
  Packet packet = 1;
}

message SerializeRequest {
  Packet packet = 1;
}

message SerializeResponse {
  bytes payload = 1;
}

service AX25Parser {
  rpc Parse(ParseRequest) returns (ParseResponse) {}
  rpc Serialize(SerializeRequest) returns (SerializeResponse) {}
}
